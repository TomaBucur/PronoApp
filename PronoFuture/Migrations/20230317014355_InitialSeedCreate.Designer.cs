// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PronoFuture.Data;

#nullable disable

namespace PronoFuture.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230317014355_InitialSeedCreate")]
    partial class InitialSeedCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PronoFuture.Models.Championship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChampionshipStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Championships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChampionshipStatus = 1,
                            EndingDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Premier League",
                            StartingDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ChampionshipStatus = 1,
                            EndingDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bundesliga",
                            StartingDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ChampionshipStatus = 0,
                            EndingDate = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Liga",
                            StartingDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PronoFuture.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChampionshipId")
                        .HasColumnType("int");

                    b.Property<string>("GuestTeam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestTeamGoals")
                        .HasColumnType("int");

                    b.Property<string>("HostTeam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HostTeamGoals")
                        .HasColumnType("int");

                    b.Property<int>("MatchStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 1",
                            GuestTeamGoals = 2,
                            HostTeam = "Host Team 1",
                            HostTeamGoals = 2,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Guest Team 1"
                        },
                        new
                        {
                            Id = 2,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 2",
                            GuestTeamGoals = 5,
                            HostTeam = "Host Team 2",
                            HostTeamGoals = 1,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Guest Team 2"
                        },
                        new
                        {
                            Id = 3,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 3",
                            GuestTeamGoals = 0,
                            HostTeam = "Host Team 3",
                            HostTeamGoals = 0,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Guest Team 3"
                        },
                        new
                        {
                            Id = 4,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 4",
                            GuestTeamGoals = 1,
                            HostTeam = "Host Team 4",
                            HostTeamGoals = 4,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Host Team 4"
                        },
                        new
                        {
                            Id = 5,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 5",
                            GuestTeamGoals = 1,
                            HostTeam = "Host Team 5",
                            HostTeamGoals = 0,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Guest Team 5"
                        },
                        new
                        {
                            Id = 6,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 6",
                            GuestTeamGoals = 4,
                            HostTeam = "Host Team 6",
                            HostTeamGoals = 2,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Guest Team 6"
                        },
                        new
                        {
                            Id = 7,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 7",
                            GuestTeamGoals = 4,
                            HostTeam = "Host Team 7",
                            HostTeamGoals = 4,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Guest Team 7"
                        },
                        new
                        {
                            Id = 8,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 8",
                            GuestTeamGoals = 5,
                            HostTeam = "Host Team 8",
                            HostTeamGoals = 5,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Guest Team 8"
                        },
                        new
                        {
                            Id = 9,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 9",
                            GuestTeamGoals = 2,
                            HostTeam = "Host Team 9",
                            HostTeamGoals = 4,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Host Team 9"
                        },
                        new
                        {
                            Id = 10,
                            ChampionshipId = 1,
                            GuestTeam = "Guest Team 10",
                            GuestTeamGoals = 2,
                            HostTeam = "Host Team 10",
                            HostTeamGoals = 3,
                            MatchStatus = 1,
                            StartingDate = new DateTime(2023, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Winner = "Host Team 10"
                        });
                });

            modelBuilder.Entity("PronoFuture.Models.MatchPronostic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoalsDifferencePronostic")
                        .HasColumnType("int");

                    b.Property<int>("GuestTeamGoalsPronostic")
                        .HasColumnType("int");

                    b.Property<int>("HostTeamGoalsPronostic")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int?>("PronosticChampionshipId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PronosticChampionshipId");

                    b.HasIndex("UserId");

                    b.ToTable("MatchPronostics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GoalsDifferencePronostic = 0,
                            GuestTeamGoalsPronostic = 2,
                            HostTeamGoalsPronostic = 2,
                            MatchId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            GoalsDifferencePronostic = 0,
                            GuestTeamGoalsPronostic = 5,
                            HostTeamGoalsPronostic = 5,
                            MatchId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            GoalsDifferencePronostic = 0,
                            GuestTeamGoalsPronostic = 0,
                            HostTeamGoalsPronostic = 0,
                            MatchId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            GoalsDifferencePronostic = 0,
                            GuestTeamGoalsPronostic = 0,
                            HostTeamGoalsPronostic = 0,
                            MatchId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            GoalsDifferencePronostic = 1,
                            GuestTeamGoalsPronostic = 2,
                            HostTeamGoalsPronostic = 3,
                            MatchId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            GoalsDifferencePronostic = 4,
                            GuestTeamGoalsPronostic = 4,
                            HostTeamGoalsPronostic = 0,
                            MatchId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            GoalsDifferencePronostic = 2,
                            GuestTeamGoalsPronostic = 3,
                            HostTeamGoalsPronostic = 1,
                            MatchId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            GoalsDifferencePronostic = 2,
                            GuestTeamGoalsPronostic = 2,
                            HostTeamGoalsPronostic = 4,
                            MatchId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            GoalsDifferencePronostic = 1,
                            GuestTeamGoalsPronostic = 4,
                            HostTeamGoalsPronostic = 5,
                            MatchId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            GoalsDifferencePronostic = 4,
                            GuestTeamGoalsPronostic = 5,
                            HostTeamGoalsPronostic = 1,
                            MatchId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            GoalsDifferencePronostic = 2,
                            GuestTeamGoalsPronostic = 5,
                            HostTeamGoalsPronostic = 3,
                            MatchId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            GoalsDifferencePronostic = 0,
                            GuestTeamGoalsPronostic = 5,
                            HostTeamGoalsPronostic = 5,
                            MatchId = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            GoalsDifferencePronostic = 3,
                            GuestTeamGoalsPronostic = 5,
                            HostTeamGoalsPronostic = 2,
                            MatchId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            GoalsDifferencePronostic = 2,
                            GuestTeamGoalsPronostic = 3,
                            HostTeamGoalsPronostic = 1,
                            MatchId = 7,
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            GoalsDifferencePronostic = 2,
                            GuestTeamGoalsPronostic = 3,
                            HostTeamGoalsPronostic = 1,
                            MatchId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            GoalsDifferencePronostic = 0,
                            GuestTeamGoalsPronostic = 2,
                            HostTeamGoalsPronostic = 2,
                            MatchId = 8,
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            GoalsDifferencePronostic = 4,
                            GuestTeamGoalsPronostic = 4,
                            HostTeamGoalsPronostic = 0,
                            MatchId = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            GoalsDifferencePronostic = 3,
                            GuestTeamGoalsPronostic = 3,
                            HostTeamGoalsPronostic = 0,
                            MatchId = 9,
                            UserId = 2
                        },
                        new
                        {
                            Id = 19,
                            GoalsDifferencePronostic = 2,
                            GuestTeamGoalsPronostic = 4,
                            HostTeamGoalsPronostic = 2,
                            MatchId = 10,
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            GoalsDifferencePronostic = 3,
                            GuestTeamGoalsPronostic = 4,
                            HostTeamGoalsPronostic = 1,
                            MatchId = 10,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PronoFuture.Models.PronosticChampionship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChampionshipId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.HasIndex("UserId");

                    b.ToTable("PronosticsChampionships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChampionshipId = 1,
                            UserId = 1,
                            UserPoints = 0
                        },
                        new
                        {
                            Id = 2,
                            ChampionshipId = 1,
                            UserId = 2,
                            UserPoints = 0
                        });
                });

            modelBuilder.Entity("PronoFuture.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChampionshipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("PronoFuture.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadPronostics")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodPronostics")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BadPronostics = 0,
                            Email = "johndoe@example.com",
                            GoodPronostics = 0,
                            Name = "Dan Negru",
                            Password = "password1",
                            Phone = "555-1234",
                            RegistrationDate = new DateTime(2023, 3, 17, 3, 43, 55, 78, DateTimeKind.Local).AddTicks(7556),
                            TournamentId = 0,
                            UserRole = 0
                        },
                        new
                        {
                            Id = 2,
                            BadPronostics = 0,
                            Email = "janedoe@example.com",
                            GoodPronostics = 0,
                            Name = "Ionut Cusca",
                            Password = "password2",
                            Phone = "555-5678",
                            RegistrationDate = new DateTime(2023, 3, 17, 3, 43, 55, 78, DateTimeKind.Local).AddTicks(7612),
                            TournamentId = 0,
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<int>("TournamentsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("TournamentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("PronoFuture.Models.Match", b =>
                {
                    b.HasOne("PronoFuture.Models.Championship", "Championship")
                        .WithMany("Matches")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Championship");
                });

            modelBuilder.Entity("PronoFuture.Models.MatchPronostic", b =>
                {
                    b.HasOne("PronoFuture.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PronoFuture.Models.PronosticChampionship", null)
                        .WithMany("Pronostics")
                        .HasForeignKey("PronosticChampionshipId");

                    b.HasOne("PronoFuture.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PronoFuture.Models.PronosticChampionship", b =>
                {
                    b.HasOne("PronoFuture.Models.Championship", "Championship")
                        .WithMany()
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PronoFuture.Models.User", "User")
                        .WithMany("UserPronosticChampionship")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Championship");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PronoFuture.Models.Tournament", b =>
                {
                    b.HasOne("PronoFuture.Models.Championship", "Championship")
                        .WithMany()
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Championship");
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("PronoFuture.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PronoFuture.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PronoFuture.Models.Championship", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("PronoFuture.Models.PronosticChampionship", b =>
                {
                    b.Navigation("Pronostics");
                });

            modelBuilder.Entity("PronoFuture.Models.User", b =>
                {
                    b.Navigation("UserPronosticChampionship");
                });
#pragma warning restore 612, 618
        }
    }
}
